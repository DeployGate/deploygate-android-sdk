#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

readonly OUTPUT_DIR="$(mktemp -d)"

usage() {
  cat <<EOF >&2
Usage:
  verify-bytecode-version -h
  verify-bytecode-version [--java <java version>] [--sniffer-version <sniffer version>] <--aar|--jar|--dir> <path>

Verify bytecode of class files

Available options:
-h, --help           Print this help and exit
--java               Java version e.g. 1.7, 1.8
--sniffer-version    animal-sniffer version (defaults to 12.1)
--aar                The path of the aar to verify
--dir                The path of the directory that contains class files to verify
--jar                The path of the jar to verify
EOF
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT

  rm -fr "${OUTPUT_DIR}"
}

initialize_colors() {
  NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
}

setup_colors() {
  if [[ -t 2 ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

info() {
  msg "${GREEN}$1${NOFORMAT}"
}

warn() {
  msg "${YELLOW}$1${NOFORMAT}"
}

err() {
  msg "${RED}$1${NOFORMAT}"
}

die() {
  err "${1-}"
  exit "${2-1}"
}

parse_params() {
  java_version='1.7'
  sniffer_jar_version='1.21'
  aar_path=''
  target_path=''

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    --java)
      java_version="${2-}"
      shift
      ;;
    --sniffer-version)
      sniffer_jar_version="${2-}"
      shift
      ;;
    --aar)
      aar_path="${2-}"
      shift
      ;;
    --dir|--jar)
      target_path="${2-}"
      shift
      ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac

    shift
  done

  [[ -z "${sniffer_jar_version-}" ]] && die "Missing required parameter: either of --sniffer-version"

  bytecode_version=''

  case "$java_version" in
    "1.7")
      bytecode_version="51.0"
      ;;
    "1.8")
      bytecode_version="52.0"
      ;;
    *)
      die "$java_version is not defined"
  esac

  return 0
}

download_sniffer_jar() {
  local -r version="$1" output_to="$2"

  curl -X GET \
    -sSfL \
    --url "https://repo1.maven.org/maven2/org/codehaus/mojo/animal-sniffer/$version/animal-sniffer-$version.jar" \
    -o "$output_to/animal-sniffer.jar"
}

initialize_colors
parse_params "$@"
setup_colors

download_sniffer_jar "$sniffer_jar_version" "$OUTPUT_DIR"

if [[ -n "$aar_path" ]]; then
  target_path="$OUTPUT_DIR/classes.jar"
  unzip -q "$aar_path" -d "$(dirname "$target_path")"
fi

pushd "$(dirname "$target_path")" >/dev/null 2>&1

java -jar "$OUTPUT_DIR/animal-sniffer.jar" "$(basename "$target_path")" | sort -n > "$OUTPUT_DIR/contents.txt"

popd >/dev/null 2>&1

if [[ ! -s "$OUTPUT_DIR/contents.txt" ]]; then
  die "animal-sniffer produced unexpected results"
fi

if [[ -z "$(cat < "$OUTPUT_DIR/contents.txt" | grep -v -e "^$bytecode_version\s")" ]]; then
  info "OK! $java_version ($bytecode_version)"
else
  cat < "$OUTPUT_DIR/contents.txt" | grep -v -e "^$bytecode_version\s" || true
  die "different bytecode version from $bytecode_version was found"
fi