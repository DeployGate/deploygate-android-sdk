apply plugin: 'maven-publish'
apply plugin: 'signing'

def publicationVariants = ["release"]

def getRepositoryUsername() {
    return hasProperty('nexusUsername') ? nexusUsername : ""
}

def getRepositoryPassword() {
    return hasProperty('nextPassword') ? nextPassword : ""
}

def isRelease() {
    return rootProject.ext.releaseVersion =~ /\d+\.\d+\.\d+/
}

android.libraryVariants.configureEach { variant ->
    if (publicationVariants.contains(variant.name)) {
        project.task("generateJavadocFor${variant.name.capitalize()}Publication", type: Javadoc) {
            source = variant.getJavaCompileProvider().get().source
            classpath = variant.getJavaCompileProvider().get().classpath + files(project.android.getBootClasspath())
            options.linkSource true
        }

        project.task("generateSourcesJarFor${variant.name.capitalize()}Publication", type: Jar) {
            archiveClassifier.set('sources')
            from variant.sourceSets.collect { it.javaDirectories }.flatten()
        }

        project.task("generateJavadocsJarFor${variant.name.capitalize()}Publication", type: Jar) {
            archiveClassifier.set('javadoc')
            from files(tasks.getByName("generateJavadocFor${variant.name.capitalize()}Publication"))
        }

        project.tasks.findByName("assemble${variant.name.capitalize()}").dependsOn(
                "generateSourcesJarFor${variant.name.capitalize()}Publication",
                "generateJavadocsJarFor${variant.name.capitalize()}Publication",
                "generatePomFileFor${variant.name.capitalize()}Publication"
        )
    }
}

afterEvaluate {
    publishing {
        repositories {
            maven {
                url = isRelease() ? "https://oss.sonatype.org/service/local/staging/deploy/maven2/" : "https://oss.sonatype.org/content/repositories/snapshots/"

                credentials(PasswordCredentials) {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }

        publications {
            release(MavenPublication) {
                from components.release
                artifact generateSourcesJarForReleasePublication
                artifact generateJavadocsJarForReleasePublication

                groupId = 'com.deploygate'
                artifactId = project.ext.artifactId
                version = project.version

                pom {
                    name = project.ext.displayName
                    description = project.ext.desc
                    url = 'https://github.com/DeployGate/deploygate-android-sdk'
                    licenses {
                        license {
                            name =  "The Apache Software License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                            distribution = "repo"
                        }
                    }
                    developers {
                        developer {
                            id = "deploygate"
                            name = "DeployGate"
                        }
                    }
                    scm {
                        url = 'https://github.com/DeployGate/deploygate-android-sdk'
                    }
                }
            }
        }
    }

    signing {
        required { isRelease() && gradle.taskGraph.hasTask("publishToMavenRepository") }

        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
        publishing.publications.configureEach { publication ->
            sign publication
        }
    }
}

